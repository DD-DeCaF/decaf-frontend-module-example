{"version":3,"sources":["example.component.ts"],"names":[],"mappings":";AAAA,0DAA0D;AAC1D,qCAAqC;AACrC,6BAA8B,cAAc,CAAC,CAAA;AAC7C,QAAO,0BAA0B,CAAC,CAAA;AAGrB,sBAAc,GAAG,SAAS,CAAC;AACxC,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,sBAAc,EAAE,EAAE,CAAC,CAAC;AAEnD,gHAAgH;AAChH,OAAO,CAAC,MAAM,CAAC,UAAU,gBAAgB;IACxC,gBAAgB;SACd,QAAQ,CAAC,sBAAc,EAAE;QACzB,OAAO,EAAE;YACR,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;YACzC,IAAI,EAAE,mBAAmB;SACzB;KACD,CAAC;SACD,KAAK,CAAC,sBAAc,EAAE;QACtB,GAAG,EAAE,MAAI,sBAAgB;QACzB,KAAK,EAAE;YACN,UAAU,EAAE;gBACX,WAAW,EAAK,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,4BAAyB;gBAC3D,UAAU,EAAE,0BAA0B;gBACtC,YAAY,EAAE,SAAS;aACvB;YACD,UAAU,EAAE;gBACX,WAAW,EAAK,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,sBAAmB;gBACrD,UAAU,EAAE,iCAAiC;gBAC7C,YAAY,EAAE,SAAS;aACvB;YACD,aAAa,EAAE;gBACd,WAAW,EAAK,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAe;gBACjD,UAAU,EAAE,6BAA6B;gBACzC,YAAY,EAAE,KAAK;aACnB;SACD;QACD,OAAO,YAAC,MAAc;YACrB,+BAA+B;YAC/B,4CAA4C;YAC5C,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAChC,CAAC;QACD,MAAM,YAAC,MAAc;YACpB,+BAA+B;YAC/B,4CAA4C;YAC5C,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC3B,CAAC;KACD,CAAC;SACD,KAAK,CAAI,sBAAc,UAAO,EAAE;QAChC,GAAG,EAAE,OAAO;QACZ,KAAK,EAAE;YACN,UAAU,EAAE;gBACX,WAAW,EAAK,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,eAAY;aAC9C;SACD;KACD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAGH;IACC,oCAAY,MAAc,EAAE,OAAO;QAClC,+BAA+B;QAC/B,4CAA4C;QAC5C,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAC9C,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;QAE9C,iCAAiC;QACjC,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IACF,iCAAC;AAAD,CAXA,AAWC,IAAA;AAED;IAAA;QACC,SAAI,GAAG,sBAAc,CAAC;IACvB,CAAC;IAAD,oCAAC;AAAD,CAFA,AAEC,IAAA;AAED;IAOC,2CAAY,MAAM,EAAE,OAAO;QAJ3B,WAAM,GAAQ,CAAC;gBACd,OAAO,EAAE,EAAE;aACX,CAAC,CAAC;QAGF,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,IAAI,EAAE,gBAAgB;SACtB,CAAC,CAAC;IACJ,CAAC;IACF,wCAAC;AAAD,CAZA,AAYC,IAAA;AAED;kBAAe,OAAO,CAAC","file":"example.component.js","sourcesContent":["// Turn of WS TS inspection for the 'decaf-common' import.\n// noinspection TypeScriptCheckImport\nimport {Config, dirname} from 'decaf-common';\nimport './example.component.css!';\n\n\nexport const COMPONENT_NAME = 'example';\nconst example = angular.module(COMPONENT_NAME, []);\n\n// TODO: we need to make it so the module name and the .register() are decoupled and not dependant on each other\nexample.config(function (platformProvider) {\n\tplatformProvider\n\t\t.register(COMPONENT_NAME, {\n\t\t\tsharing: {\n\t\t\t\taccept: [{type: 'money', multiple: true}],\n\t\t\t\tname: 'Example Component'\n\t\t\t}\n\t\t})\n\t\t.state(COMPONENT_NAME, {\n\t\t\turl: `/${COMPONENT_NAME}`,\n\t\t\tviews: {\n\t\t\t\t'content@': {\n\t\t\t\t\ttemplateUrl: `${dirname(module.id)}/example.component.html`,\n\t\t\t\t\tcontroller: ExampleComponentController,\n\t\t\t\t\tcontrollerAs: 'example'\n\t\t\t\t},\n\t\t\t\t'toolbar@': {\n\t\t\t\t\ttemplateUrl: `${dirname(module.id)}/toolbar.tpl.html`,\n\t\t\t\t\tcontroller: ExampleComponentToolbarController,\n\t\t\t\t\tcontrollerAs: 'toolbar'\n\t\t\t\t},\n\t\t\t\t'navigation@': {\n\t\t\t\t\ttemplateUrl: `${dirname(module.id)}/nav.tpl.html`,\n\t\t\t\t\tcontroller: ExampleComponentNavController,\n\t\t\t\t\tcontrollerAs: 'nav'\n\t\t\t\t}\n\t\t\t},\n\t\t\tonEnter(config: Config) {\n\t\t\t\t// Turn of WS inspection for TS\n\t\t\t\t// noinspection TypeScriptUnresolvedFunction\n\t\t\t\tconfig.set('color', '#ff5200');\n\t\t\t},\n\t\t\tonExit(config: Config) {\n\t\t\t\t// Turn of WS inspection for TS\n\t\t\t\t// noinspection TypeScriptUnresolvedFunction\n\t\t\t\tconfig.set('color', null);\n\t\t\t}\n\t\t})\n\t\t.state(`${COMPONENT_NAME}.test`, {\n\t\t\turl: '/test',\n\t\t\tviews: {\n\t\t\t\t'content@': {\n\t\t\t\t\ttemplateUrl: `${dirname(module.id)}/test.html`\n\t\t\t\t}\n\t\t\t}\n\t\t});\n});\n\n\nclass ExampleComponentController {\n\tconstructor(config: Config, sharing) {\n\t\t// Turn of WS inspection for TS\n\t\t// noinspection TypeScriptUnresolvedFunction\n\t\tlet component = config.get('componentConfig');\n\t\tconsole.info('COMPONENT CONFIG: ', component);\n\n\t\t// Data from the sharing provider\n\t\tlet money = sharing.items('money');\n\t\tconsole.info('GOT MONEY: ', money);\n\t}\n}\n\nclass ExampleComponentNavController {\n\tname = COMPONENT_NAME;\n}\n\nclass ExampleComponentToolbarController {\n\ttargets: any;\n\n\tsalads: any = [{\n\t\tlettuce: 10\n\t}];\n\n\tconstructor($scope, sharing) {\n\t\tsharing.provide($scope, {\n\t\t\tfood: 'toolbar.salads'\n\t\t});\n\t}\n}\n\nexport default example;\n"],"sourceRoot":"/source/"}