{"version":3,"sources":["plot.service.ts"],"names":[],"mappings":"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","file":"plot.service.js","sourcesContent":["var Plotly = require('plotly.js/lib/core');\n\nconst plotService = angular.module('plot.service', []);\n\nexport class PlotService {\n\tconstructor() {\n\t}\n\n\tplotPhase(domId, metabolite, growthRate, theoreticalYields) {\n\t\tvar strains = {'wild': 'rgb(205, 12, 24)', 'modified': 'rgb(22, 96, 167)'};\n\n\t\tvar point = {\n\t\t\tx: growthRate,\n\t\t\ty: [theoreticalYields.flux],\n\t\t\ttype: 'scatter',\n\t\t\tshowlegend: false,\n\t\t\tline: {color: strains['modified']},\n\t\t\tname: 'experiment data'\n\t\t};\n\n\t\tvar data = [point];\n\n\t\tvar currentKey = null;\n\n\t\tangular.forEach(strains, function(color, strainKey) {\n\t\t\tvar points = {\n\t\t\t\t'objective_lower_bound': [],\n\t\t\t\t'objective_upper_bound': [],\n\t\t\t};\n\n\t\t\t// The parser for backend data which would not be required after it would be proceeded on the backend side\n\t\t\tangular.forEach(theoreticalYields['phase-planes'][strainKey], function (value, key) {\n\t\t\t\tif (!(key in points)) {\n\t\t\t\t\tpoints[key] = [];\n\t\t\t\t\tcurrentKey = key;\n\t\t\t\t}\n\t\t\t\tangular.forEach(theoreticalYields['phase-planes'][strainKey][key], function (value, key) {\n\t\t\t\t\tthis.push(value);\n\t\t\t\t}, points[key]);\n\t\t\t});\n\n\t\t\tvar keys = ['objective_lower_bound', 'objective_upper_bound'];\n\t\t\tfor (var ind in keys) {\n\t\t\t\tthis.push({\n\t\t\t\t\tx: points[keys[ind]],\n\t\t\t\t\ty: points[currentKey],\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tshowlegend: false,\n\t\t\t\t\tline: {color: color},\n\t\t\t\t\tname: currentKey\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (currentKey !== null) {\n\t\t\t\tfunction connect(index: number) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: [points['objective_lower_bound'][index], points['objective_upper_bound'][index]],\n\t\t\t\t\t\ty: [points[currentKey][index], points[currentKey][index]],\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\tshowlegend: false,\n\t\t\t\t\t\tline: {color: color},\n\t\t\t\t\t\tname: currentKey\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.push(connect(0));\n\t\t\t\tthis.push(connect(points['objective_upper_bound'].length - 1));\n\t\t\t}\n\n\t\t}, data);\n\n\t\tvar layout = {\n\t\t\ttitle: metabolite,\n\t\t\txaxis: {title: 'growth, 1/h'},\n\t\t\tyaxis: {title: currentKey},\n\t\t\tmargin: {\n\t\t\t\tl: 60,\n\t\t\t\tr: 15,\n\t\t\t\tb: 45,\n\t\t\t\tt: 60,\n\t\t\t\tpad: 10\n\t\t\t}\n\t\t};\n\n\t\tPlotly.newPlot(domId, data, layout);\n\t}\n}\n\nplotService.service('PlotService', PlotService);\nexport default plotService;\n"],"sourceRoot":"/source/"}